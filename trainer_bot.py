# -*- coding: utf-8 -*-
"""
–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–π —Ç—Ä–µ–Ω–µ—Ä-–±–æ—Ç (aiogram 2.25.1).
–§—É–Ω–∫—Ü–∏–∏:
- /start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
- "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏" ‚Üí –≤—ã–±–æ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (‚Ññ1/‚Ññ2) ‚Üí —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è).
- –í—ã–±–æ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è ‚Üí –ø–æ–∫–∞–∑ –ø—Ä–æ—à–ª—ã—Ö –≤–µ—Å–æ–≤ ‚Üí –≤–≤–æ–¥ –Ω–æ–≤—ã—Ö (5 –ø–æ–¥—Ö–æ–¥–æ–≤: "60x8 / 62.5x8 / ...").
- /progress ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏.
- "‚óÄÔ∏è –ù–∞–∑–∞–¥" –∏ "‚ùå –û—Ç–º–µ–Ω–∞" (/cancel) ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã—Ö–æ–¥—è—Ç/–≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –º–µ–Ω—é (–∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è).
–•—Ä–∞–Ω–µ–Ω–∏–µ ‚Äî workouts.json —Ä—è–¥–æ–º —Å —Ñ–∞–π–ª–æ–º.
"""

import os
import json
from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# ======= –ù–ê–°–¢–†–û–ô–ö–ò =======
API_TOKEN = "7376516944:AAHzTEhTfMAmxT5u6dxwsnSK1Kn5zojNauI"  # <‚Äî –í–°–¢–ê–í–¨–¢–ï –¢–û–ö–ï–ù @BotFather
DATA_FILE = "workouts.json"
PROGRAM = "Full Body"
SETS_PER_EXERCISE = 5  # —Å—Ç—Ä–æ–≥–æ 5 –ø–æ–¥—Ö–æ–¥–æ–≤ –∫–∞–∫ –≤—ã –ø—Ä–æ—Å–∏–ª–∏

# ======= –î–ê–ù–ù–´–ï –¢–†–ï–ù–ò–†–û–í–û–ö =======
WORKOUTS = [
    {   # index 0 ‚Üí –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ‚Ññ1
        "name": "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ‚Ññ1",
        "exercises": [
            "–ù–æ–≥–∏ ‚Äî –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è",
            "–°–ø–∏–Ω–∞ ‚Äî –¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –≤ –Ω–∞–∫–ª–æ–Ω–µ –æ–±—Ä–∞—Ç–Ω—ã–º —Ö–≤–∞—Ç–æ–º",
            "–ì—Ä—É–¥–Ω—ã–µ ‚Äî –ñ–∏–º —à—Ç–∞–Ω–≥–∏ –ª—ë–∂–∞",
            "–ù–æ–≥–∏ ‚Äî –ñ–∏–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–æ–≥–∞–º–∏",
            "–°–ø–∏–Ω–∞ ‚Äî –ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è / –¢—è–≥–∞ –±–ª–æ–∫–∞",
            "–ü–ª–µ—á–∏ ‚Äî –ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π —Å—Ç–æ—è",
            "–¢—Ä–∏—Ü–µ–ø—Å—ã ‚Äî –ñ–∏–º —É–∑–∫–∏–º —Ö–≤–∞—Ç–æ–º",
            "–ü—Ä–µ—Å—Å ‚Äî –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è",
        ]
    },
    {   # index 1 ‚Üí –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ‚Ññ2
        "name": "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ‚Ññ2",
        "exercises": [
            "–ù–æ–≥–∏ ‚Äî –í—ã–ø–∞–¥—ã",
            "–°–ø–∏–Ω–∞ ‚Äî –¢—è–≥–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞ –∫ –ø–æ—è—Å—É",
            "–ì—Ä—É–¥–Ω—ã–µ ‚Äî –ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –ø–æ–¥ —É–≥–ª–æ–º 30¬∞",
            "–ù–æ–≥–∏ ‚Äî –†–∞–∑–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ / –ú—ë—Ä—Ç–≤–∞—è —Ç—è–≥–∞",
            "–°–ø–∏–Ω–∞ ‚Äî –¢—è–≥–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞ —É–∑–∫–æ–π —Ä—É–∫–æ—è—Ç–∫–æ–π",
            "–ü–ª–µ—á–∏ ‚Äî –†–∞–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—Ç–æ—Ä–æ–Ω—ã",
            "–¢—Ä–∏—Ü–µ–ø—Å—ã ‚Äî –û—Ç–∂–∏–º–∞–Ω–∏—è –Ω–∞ –±—Ä—É—Å—å—è—Ö / –æ—Ç —Å–∫–∞–º—å–∏",
            "–ë–∏—Ü–µ–ø—Å ‚Äî –ü–æ–¥—ä—ë–º —à—Ç–∞–Ω–≥–∏ —Å—Ç–æ—è",
        ]
    }
]

# ======= FSM =======
class InputState(StatesGroup):
    waiting_for_sets = State()  # –∂–¥—ë–º —Å—Ç—Ä–æ–∫—É "–≤–µ—Åx–ø–æ–≤—Ç–æ—Ä—ã / ... (5 —Ä–∞–∑)"

# ======= –•–†–ê–ù–ò–õ–ö–ê =======
def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def ensure_structure():
    data = load_data()
    if PROGRAM not in data:
        data[PROGRAM] = {}
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É: PROGRAM ‚Üí –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ‚Üí –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ ‚Üí []
    for w in WORKOUTS:
        wname = w["name"]
        if wname not in data[PROGRAM]:
            data[PROGRAM][wname] = {}
        for ex in w["exercises"]:
            data[PROGRAM][wname].setdefault(ex, [])
    save_data(data)

# ======= –ü–ê–†–°–ò–ù–ì =======
def parse_sets_line(text):
    """
    –û–∂–∏–¥–∞–µ–º 5 –ø–æ–¥—Ö–æ–¥–æ–≤ –≤ –≤–∏–¥–µ: "60x8 / 62.5x8 / 65x6 / 65x6 / 67.5x5"
    –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏ ‚Äî '/', ';' —Ç–æ–∂–µ –¥–æ–ø—É—Å—Ç–∏–º—ã (–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º).
    –î—Ä–æ–±–Ω—ã–µ –≤–µ—Å–∞ –¥–æ–ø—É—Å–∫–∞—é—Ç –∑–∞–ø—è—Ç—É—é ‚Äî –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —Ç–æ—á–∫—É.
    –í–æ–∑–≤—Ä–∞—Ç: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π [{"w": float, "r": int}, ...] —Ä–æ–≤–Ω–æ –∏–∑ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
    """
    work = text.strip().replace(";", "/").replace(",", ".")
    parts = [p.strip() for p in work.split("/") if p.strip()]
    if len(parts) != SETS_PER_EXERCISE:
        raise ValueError(f"–û–∂–∏–¥–∞–ª–æ—Å—å {SETS_PER_EXERCISE} –ø–æ–¥—Ö–æ–¥–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ {len(parts)}.")
    sets = []
    for p in parts:
        p = p.lower().replace("√ó", "x")
        if "x" not in p:
            raise ValueError(f"–ù–µ—Ç 'x' –≤ '{p}'. –ü—Ä–∏–º–µ—Ä: 62.5x8")
        w_str, r_str = p.split("x", 1)
        w = float(w_str)
        r = int(r_str)
        sets.append({"w": w, "r": r})
    return sets

def avg_weight(sets):
    return round(sum(s["w"] for s in sets) / len(sets), 2) if sets else 0.0

def sets_to_text(sets):
    return " / ".join(f"{s['w']}x{s['r']}" for s in sets)

# ======= –ë–û–¢ =======
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# ======= –ö–õ–ê–í–ò–ê–¢–£–†–´ =======
def kb_main():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="menu_workouts"),
        InlineKeyboardButton("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="menu_progress"),
    )
    kb.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_cancel"))
    return kb

def kb_workouts():
    kb = InlineKeyboardMarkup(row_width=1)
    for i, w in enumerate(WORKOUTS):
        kb.add(InlineKeyboardButton(f"üí™ {w['name']}", callback_data=f"open::{i}"))  # –∫–æ—Ä–æ—Ç–∫–∞—è data
    kb.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main"))
    return kb

def kb_exercises(workout_idx: int):
    kb = InlineKeyboardMarkup(row_width=1)
    for j, ex in enumerate(WORKOUTS[workout_idx]["exercises"]):
        kb.add(InlineKeyboardButton(f"üü° {ex}", callback_data=f"ex::{workout_idx}::{j}"))  # –∫–æ—Ä–æ—Ç–∫–∞—è data
    kb.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_workouts"))
    return kb

# ======= –•–ï–ù–î–õ–ï–†–´ =======
@dp.message_handler(commands=["start"])
async def cmd_start(m: types.Message):
    ensure_structure()
    await m.answer("‚¨õÔ∏èüü° <b>FULL BODY</b>\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá", parse_mode="HTML", reply_markup=kb_main())

# /cancel ‚Äî –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.message_handler(commands=["cancel"], state="*")
async def cmd_cancel(m: types.Message, state: FSMContext):
    if await state.get_state() is not None:
        await state.finish()
    await m.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.", reply_markup=kb_main())

# –ö–Ω–æ–ø–∫–∞ "‚ùå –û—Ç–º–µ–Ω–∞" ‚Äî –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data == "menu_cancel", state="*")
async def cb_cancel(cq: types.CallbackQuery, state: FSMContext):
    if await state.get_state() is not None:
        await state.finish()
    # –ø—Ä–æ–±—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å; –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
    try:
        await cq.message.edit_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb_main())
    except Exception:
        await cq.message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb_main())
    await cq.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query_handler(lambda c: c.data == "back_main")
async def cb_back_main(cq: types.CallbackQuery):
    try:
        await cq.message.edit_text("‚¨õÔ∏èüü° <b>FULL BODY</b>\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá", parse_mode="HTML", reply_markup=kb_main())
    except Exception:
        await cq.message.answer("‚¨õÔ∏èüü° <b>FULL BODY</b>\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá", parse_mode="HTML", reply_markup=kb_main())
    await cq.answer()

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ ¬´–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏¬ª
@dp.callback_query_handler(lambda c: c.data == "menu_workouts")
async def cb_menu_workouts(cq: types.CallbackQuery):
    await cq.message.edit_text("üèãÔ∏è –í—ã–±–µ—Ä–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:", reply_markup=kb_workouts())
    await cq.answer()

# –ü—Ä–æ–≥—Ä–µ—Å—Å (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏)
@dp.callback_query_handler(lambda c: c.data == "menu_progress")
async def cb_menu_progress(cq: types.CallbackQuery):
    data = load_data()
    fb = data.get(PROGRAM, {})
    text = "üìä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏</b>\n"
    for wname, ex_dict in fb.items():
        text += f"\n<b>{wname}</b>\n"
        for ex_name, logs in ex_dict.items():
            if not logs:
                continue
            last = logs[-1]
            text += f"‚Ä¢ {ex_name}: {last['avg']} –∫–≥ ({last['date']})\n"
    if text.strip() == "üìä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏</b>":
        text = "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    await cq.message.edit_text(text, parse_mode="HTML", reply_markup=kb_main())
    await cq.answer()

# –û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
@dp.callback_query_handler(lambda c: c.data.startswith("open::"))
async def cb_open_workout(cq: types.CallbackQuery):
    _, idx_str = cq.data.split("::", 1)
    w_idx = int(idx_str)
    wname = WORKOUTS[w_idx]["name"]
    plan = "\n".join(f"{i+1}) {ex}" for i, ex in enumerate(WORKOUTS[w_idx]["exercises"]))
    txt = f"üèãÔ∏è <b>{wname}</b>\n\n{plan}\n\n–í—ã–±–µ—Ä–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:"
    await cq.message.edit_text(txt, parse_mode="HTML", reply_markup=kb_exercises(w_idx))
    await cq.answer()

# –û—Ç–∫—Ä—ã—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
@dp.callback_query_handler(lambda c: c.data.startswith("ex::"))
async def cb_open_exercise(cq: types.CallbackQuery, state: FSMContext):
    _, w_idx_str, ex_idx_str = cq.data.split("::", 2)
    w_idx = int(w_idx_str)
    ex_idx = int(ex_idx_str)
    wname = WORKOUTS[w_idx]["name"]
    exname = WORKOUTS[w_idx]["exercises"][ex_idx]

    data = load_data()
    logs = data[PROGRAM][wname][exname]
    prev_text = logs[-1]["text"] if logs else "‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî"
    prev_date = logs[-1]["date"] if logs else "‚Äî"

    await state.update_data(workout_idx=w_idx, exercise_idx=ex_idx)

    msg = (
        f"üü° <b>{exname}</b>\n"
        f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è: {prev_date}\n"
        f"üèãÔ∏è –ë—ã–ª–æ: {prev_text}\n\n"
        f"–í–≤–µ–¥–∏ {SETS_PER_EXERCISE} –ø–æ–¥—Ö–æ–¥–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"<code>60x8 / 62.5x8 / 65x6 / 65x6 / 67.5x5</code>\n\n"
        f"/cancel ‚Äî –æ—Ç–º–µ–Ω–∞"
    )
    await cq.message.edit_text(msg, parse_mode="HTML")
    await InputState.waiting_for_sets.set()
    await cq.answer()

# –ü—Ä–∏—ë–º 5 –ø–æ–¥—Ö–æ–¥–æ–≤
@dp.message_handler(state=InputState.waiting_for_sets, content_types=types.ContentTypes.TEXT)
async def handle_sets_input(m: types.Message, state: FSMContext):
    user = await state.get_data()
    w_idx = user["workout_idx"]
    ex_idx = user["exercise_idx"]
    wname = WORKOUTS[w_idx]["name"]
    exname = WORKOUTS[w_idx]["exercises"][ex_idx]

    try:
        sets = parse_sets_line(m.text)
    except ValueError as e:
        await m.reply(f"‚ö†Ô∏è {e}\n–ü—Ä–∏–º–µ—Ä: 60x8 / 62.5x8 / 65x6 / 65x6 / 67.5x5")
        return

    data = load_data()
    logs = data[PROGRAM][wname][exname]
    prev_avg = logs[-1]["avg"] if logs else 0.0

    avg = avg_weight(sets)
    delta = round(avg - prev_avg, 2)
    today = datetime.now().strftime("%Y-%m-%d")

    entry = {"date": today, "sets": sets, "avg": avg, "text": m.text}
    data[PROGRAM][wname][exname].append(entry)
    save_data(data)

    report = (
        f"‚úÖ <b>{exname}</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n"
        f"üìÖ {today}\n"
        f"üìà –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å: {avg} –∫–≥ (–±—ã–ª–æ {prev_avg} –∫–≥)\n"
        f"Œî –ü—Ä–∏—Ä–æ—Å—Ç: {delta:+} –∫–≥"
    )
    await m.answer(report, parse_mode="HTML", reply_markup=kb_main())
    await state.finish()

# –§–æ–ª–ª–±–µ–∫
@dp.message_handler()
async def fallback(m: types.Message):
    await m.answer("–ò—Å–ø–æ–ª—å–∑—É–π /start –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

# ======= –ó–ê–ü–£–°–ö =======
if __name__ == "__main__":
    ensure_structure()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    executor.start_polling(dp, skip_updates=True)
